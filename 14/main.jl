function process2()

    data2 = Dict("NC" => "H",
        "PK" => "V",
        "SO" => "C",
        "FP" => "N",
        "PH" => "F",
        "PN" => "B",
        "NP" => "V",
        "NK" => "S",
        "FV" => "P",
        "SB" => "S",
        "VN" => "F",
        "SC" => "H",
        "OB" => "F",
        "ON" => "O",
        "HN" => "V",
        "HC" => "F",
        "SN" => "K",
        "CB" => "H",
        "OP" => "K",
        "HP" => "H",
        "KS" => "S",
        "BC" => "S",
        "VB" => "V",
        "FC" => "B",
        "BH" => "C",
        "HH" => "O",
        "KH" => "S",
        "VF" => "F",
        "PF" => "P",
        "VV" => "F",
        "PP" => "V",
        "BO" => "H",
        "BF" => "B",
        "PS" => "K",
        "FO" => "O",
        "KF" => "O",
        "FN" => "H",
        "CK" => "B",
        "VP" => "V",
        "HK" => "F",
        "OV" => "P",
        "CS" => "V",
        "FF" => "P",
        "OH" => "N",
        "VS" => "H",
        "VO" => "O",
        "CP" => "O",
        "KC" => "V",
        "KV" => "P",
        "BK" => "B",
        "VK" => "S",
        "NF" => "V",
        "OO" => "V",
        "FH" => "H",
        "CN" => "O",
        "SP" => "B",
        "KN" => "V",
        "OF" => "H",
        "NV" => "H",
        "FK" => "B",
        "PV" => "N",
        "NB" => "B",
        "KK" => "P",
        "VH" => "P",
        "CC" => "B",
        "HV" => "V",
        "OC" => "H",
        "PO" => "V",
        "NO" => "O",
        "BP" => "C",
        "NH" => "H",
        "BN" => "O",
        "BV" => "S",
        "CV" => "B",
        "HS" => "O",
        "NN" => "S",
        "NS" => "P",
        "KB" => "F",
        "CO" => "H",
        "HO" => "P",
        "PB" => "B",
        "BS" => "P",
        "SH" => "H",
        "FS" => "V",
        "SF" => "O",
        "OK" => "F",
        "KP" => "S",
        "BB" => "C",
        "PC" => "B",
        "OS" => "C",
        "SV" => "N",
        "SK" => "K",
        "KO" => "C",
        "SS" => "V",
        "CF" => "C",
        "HB" => "K",
        "VC" => "B",
        "CH" => "P",
        "HF" => "K",
        "FB" => "V")

    data2_map = Dict(
        "NC" => 0,
        "PK" => 0,
        "SO" => 0,
        "FP" => 0,
        "PH" => 0,
        "PN" => 0,
        "NP" => 0,
        "NK" => 0,
        "FV" => 0,
        "SB" => 0,
        "VN" => 0,
        "SC" => 0,
        "OB" => 0,
        "ON" => 0,
        "HN" => 0,
        "HC" => 0,
        "SN" => 0,
        "CB" => 0,
        "OP" => 0,
        "HP" => 0,
        "KS" => 0,
        "BC" => 0,
        "VB" => 0,
        "FC" => 0,
        "BH" => 0,
        "HH" => 0,
        "KH" => 0,
        "VF" => 0,
        "PF" => 0,
        "VV" => 0,
        "PP" => 0,
        "BO" => 0,
        "BF" => 0,
        "PS" => 0,
        "FO" => 0,
        "KF" => 0,
        "FN" => 0,
        "CK" => 0,
        "VP" => 0,
        "HK" => 0,
        "OV" => 0,
        "CS" => 0,
        "FF" => 0,
        "OH" => 0,
        "VS" => 0,
        "VO" => 0,
        "CP" => 0,
        "KC" => 0,
        "KV" => 0,
        "BK" => 0,
        "VK" => 0,
        "NF" => 0,
        "OO" => 0,
        "FH" => 0,
        "CN" => 0,
        "SP" => 0,
        "KN" => 0,
        "OF" => 0,
        "NV" => 0,
        "FK" => 0,
        "PV" => 0,
        "NB" => 0,
        "KK" => 0,
        "VH" => 0,
        "CC" => 0,
        "HV" => 0,
        "OC" => 0,
        "PO" => 0,
        "NO" => 0,
        "BP" => 0,
        "NH" => 0,
        "BN" => 0,
        "BV" => 0,
        "CV" => 0,
        "HS" => 0,
        "NN" => 0,
        "NS" => 0,
        "KB" => 0,
        "CO" => 0,
        "HO" => 0,
        "PB" => 0,
        "BS" => 0,
        "SH" => 0,
        "FS" => 0,
        "SF" => 0,
        "OK" => 0,
        "KP" => 0,
        "BB" => 0,
        "PC" => 0,
        "OS" => 0,
        "SV" => 0,
        "SK" => 0,
        "KO" => 0,
        "SS" => 0,
        "CF" => 0,
        "HB" => 0,
        "VC" => 0,
        "CH" => 0,
        "HF" => 0,
        "FB" => 0)

    score_data = Dict("H" => 0,
        "V" => 0,
        "C" => 0,
        "N" => 0,
        "F" => 0,
        "B" => 0,
        "V" => 0,
        "S" => 0,
        "P" => 0,
        "S" => 0,
        "F" => 0,
        "H" => 0,
        "F" => 0,
        "O" => 0,
        "V" => 0,
        "F" => 0,
        "K" => 0,
        "H" => 0,
        "K" => 0,
        "H" => 0,
        "S" => 0,
        "S" => 0,
        "V" => 0,
        "B" => 0,
        "C" => 0,
        "O" => 0,
        "S" => 0,
        "F" => 0,
        "P" => 0,
        "F" => 0,
        "V" => 0,
        "H" => 0,
        "B" => 0,
        "K" => 0,
        "O" => 0,
        "O" => 0,
        "H" => 0,
        "B" => 0,
        "V" => 0,
        "F" => 0,
        "P" => 0,
        "V" => 0,
        "P" => 0,
        "N" => 0,
        "H" => 0,
        "O" => 0,
        "O" => 0,
        "V" => 0,
        "P" => 0,
        "B" => 0,
        "S" => 0,
        "V" => 0,
        "V" => 0,
        "H" => 0,
        "O" => 0,
        "B" => 0,
        "V" => 0,
        "H" => 0,
        "H" => 0,
        "B" => 0,
        "N" => 0,
        "B" => 0,
        "P" => 0,
        "P" => 0,
        "B" => 0,
        "V" => 0,
        "H" => 0,
        "V" => 0,
        "O" => 0,
        "C" => 0,
        "H" => 0,
        "O" => 0,
        "S" => 0,
        "B" => 0,
        "O" => 0,
        "S" => 0,
        "P" => 0,
        "F" => 0,
        "H" => 0,
        "P" => 0,
        "B" => 0,
        "P" => 0,
        "H" => 0,
        "V" => 0,
        "O" => 0,
        "F" => 0,
        "S" => 0,
        "C" => 0,
        "B" => 0,
        "C" => 0,
        "N" => 0,
        "K" => 0,
        "C" => 0,
        "V" => 0,
        "C" => 0,
        "K" => 0,
        "B" => 0,
        "P" => 0,
        "K" => 0)

    x = split("SVCHKVFKCSHVFNBKKPOC", "")
    for i in x
        score_data[i] = get(score_data, i, 0) + 1
    end
    for i = 1:length(x)-1
        data2_map[x[i:i+1]|>join] = get(data2_map, x[i:i+1] |> join, 0) + 1
    end


    for k = 1:40
        c = copy(data2_map)
        for i in keys(c)
            if c[i] > 0
                ss = data2[i]
                char1 = i[1] * ss
                char2 = ss * i[2]
                data2_map[char1] = get(data2_map, char1, 0) + c[i]
                data2_map[char2] = get(data2_map, char2, 0) + c[i]
                data2_map[i] = get(data2_map, i, 0) - c[i]
                score_data[ss] = get(score_data, ss, 0) + c[i]
            end
        end
        println(k)

    end
    p = values(score_data)
    maximum(p) - minimum(p)
end


println(process2())